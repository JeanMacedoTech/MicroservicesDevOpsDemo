{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red36\green255\blue255;\red255\green255\blue255;\red67\green192\blue160;
\red193\green193\blue193;\red255\green255\blue255;\red67\green179\blue255;\red141\green212\blue254;\red202\green202\blue202;
\red194\green126\blue101;\red129\green0\blue2;\red117\green117\blue117;\red255\green251\blue254;\red193\green193\blue193;
\red255\green251\blue255;\red193\green193\blue193;\red203\green203\blue202;\red0\green0\blue0;\red255\green251\blue255;
\red203\green203\blue202;\red88\green138\blue67;\red71\green137\blue205;\red196\green83\blue86;\red205\green173\blue106;
\red167\green197\blue151;\red21\green93\blue255;\red71\green138\blue206;\red255\green255\blue11;\red251\green0\blue255;
\red141\green213\blue254;}
{\*\expandedcolortbl;;\cssrgb\c4983\c100000\c100000;\cssrgb\c100000\c100000\c99985;\cssrgb\c30631\c78928\c69023;
\cssrgb\c80088\c80088\c79988;\cssrgb\c100000\c100000\c100000;\cssrgb\c31226\c75987\c100000;\cssrgb\c61361\c86489\c99746;\cssrgb\c83229\c83229\c83125;
\cssrgb\c80778\c56830\c46925;\cssrgb\c58580\c2312\c0;\cssrgb\c53231\c53231\c53231;\cssrgb\c99980\c98781\c99732;\cssrgb\c80264\c80263\c79963;
\cssrgb\c99990\c98792\c99867;\cssrgb\c80176\c80176\c79976;\cssrgb\c83411\c83411\c83099;\cssrgb\c0\c1\c1;\cssrgb\c100000\c98802\c100000;
\cssrgb\c83320\c83320\c83112;\cssrgb\c41525\c59950\c33208;\cssrgb\c33936\c61427\c84130;\cssrgb\c81982\c41165\c41062;\cssrgb\c84255\c72854\c48827;
\cssrgb\c71008\c80807\c65805;\cssrgb\c8872\c47049\c100000;\cssrgb\c34146\c61677\c84338;\cssrgb\c100000\c100000\c0;\cssrgb\c100000\c7248\c100000;
\cssrgb\c61545\c86704\c99884;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12380\viewh16740\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0

\f0\b\fs32 \cf0 DEMO CI/CD PROJECT - MICROSERVICES APPLICATION\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \
Hey, there! \
Welcome to this demo project description and thank you so much for taking the time to check it out!\
\
---\
\'95 Project Goal: take an example microservices application and create a CI/CD pipeline using Jenkins, demonstrating DevOps practices\
\
\'95 Microservices application used: Google Microservice App Demo (https://github.com/GoogleCloudPlatform/microservices-demo)\
\
\'95 CI/CD Pipeline Design Steps:\
\
1) Create a GitHub repository so we can manage application versioning for all microservices individually, including Jenkins configuration and Terraform code.\
\
2) Terraform an S3 Bucket and an ECR Registry in AWS, so they can be used as artifactory and Docker image registry, respectively (see terraform/main.tf)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 provider\cf5 \cb6 \strokec5  \cf7 \strokec7 "aws"\cf5 \strokec5  \{\
  \cf8 \strokec8 region \cf9 \strokec9 =\cf8 \strokec8  \cf10 \strokec10 "sa-east-1"\cf5 \strokec5 \
\}\
\
\cf2 \cb3 \strokec4 resource\cf5 \cb6 \strokec5  \cf7 \strokec7 "aws_s3_bucket"\cf5 \strokec5  \cf7 \strokec7 "artifactory_bucket"\cf5 \strokec5  \{\
  \cf8 \strokec8 bucket \cf9 \strokec9 =\cf8 \strokec8  \cf10 \strokec10 "artifactory-bucket"\cf5 \strokec5 \
\}\
\
\cf2 \cb3 \strokec4 resource\cf5 \cb6 \strokec5  \cf7 \strokec7 "aws_ecr_repository"\cf5 \strokec5  \cf7 \strokec7 "ecr_repo"\cf5 \strokec5  \{\
  \cf8 \strokec8 name \cf9 \strokec9 =\cf8 \strokec8  \cf10 \strokec10 "ecr-repo"\cf5 \strokec5 \
\}
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 3) Build a Jenkins configuration file (see jenkins/jenkins.yaml) to document the necessary Jenkins plugins for the Jenkins server. We can then use the Configuration as Code Jenkins plugin for easier setup.\
\
4) Create Jenkinsfiles for each microservice, outlining all CI/CD steps:\
\'95 Checkout Branch;\
\'95 Increment microservice version;\
\'95 Build the application package (4 different programming languages were used, so I used different build and test settings and tools);\
\'95 Run a generic test for the resulting artifact;\
\'95 Push artifact to S3 bucket;\
\'95 Build Docker Image;\
\'95 Push the new image to ECR Registry;\
\'95 Update the image tag inside the K8s Deployment manifest for the microservice;\
\'95 Apply updated manifest using kubectl;\
\'95 Commit version bump back to GitHub\
\

\f0\b \cf11 Jenkinsfile specifications:\

\f1\b0 \cf0 \
1) S3 Bucket Artifactory and ECR Registry set as env vars:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf12 \cb13 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 pipeline \{\
    agent any\cf12 \cb15 \strokec16 \
\
   \cf12 \cb13 \strokec14  environment \{\
        S3_BUCKET \cf12 \cb13 \strokec17 =\cf18 \cb15 \strokec16  \cf10 \cb19 \strokec10 'artifactory-s3-bucket'\cf5 \cb19 \strokec5 \
        \cf12 \cb15 \strokec16 ECR_REGISTRY \cf12 \cb15 \strokec20 =\cf5 \cb19 \strokec5  \cf10 \cb19 \strokec10 'ecr-registry'\cf5 \cb19 \strokec5 \
 \cf12 \cb15 \strokec16    \}
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
2) Version incrementation, Build and Test stages specified for the corresponding programming language of each microservice. The example below is for a Java app built using Gradle.\
\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf5 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 stage(\cf10 \strokec10 'Increment Application Version'\cf5 \strokec5 ) \{\
            steps \{\
                script \{\
                    \cf21 \strokec21 // Defining current version:\cf5 \strokec5 \
                    \cf22 \strokec22 def\cf5 \strokec5  gradleFile \cf9 \strokec9 =\cf5 \strokec5  \cf10 \strokec10 'build.gradle'\cf5 \strokec5 \
                    \cf22 \strokec22 def\cf5 \strokec5  currentVersion \cf9 \strokec9 =\cf5 \strokec5  readFile(gradleFile)\cf9 \strokec9 .\cf5 \strokec5 readLines()\cf9 \strokec9 .\cf5 \strokec5 find \{ it \cf9 \strokec9 =~\cf5 \strokec5  \cf23 \strokec23 /version \cf24 \strokec24 \\'\cf23 \strokec23 .*\cf24 \strokec24 \\'\cf23 \strokec23 /\cf5 \strokec5  \}\
                    \cf22 \strokec22 def\cf5 \strokec5  versionPattern \cf9 \strokec9 =\cf5 \strokec5  \cf23 \strokec23 /version \cf24 \strokec24 \\'\cf23 \strokec23 (.*?)\cf24 \strokec24 \\'\cf23 \strokec23 /\cf5 \strokec5 \
                    \cf22 \strokec22 def\cf5 \strokec5  currentVersionMatch \cf9 \strokec9 =\cf5 \strokec5  currentVersion \cf9 \strokec9 =~\cf5 \strokec5  versionPattern\
                    \cf22 \strokec22 def\cf5 \strokec5  currentVersionValue \cf9 \strokec9 =\cf5 \strokec5  currentVersionMatch[\cf25 \strokec25 0\cf5 \strokec5 ][\cf25 \strokec25 1\cf5 \strokec5 ]\
\
                    \cf21 \strokec21 // Incrementing current version:\cf5 \strokec5 \
                    \cf22 \strokec22 def\cf5 \strokec5  versionParts \cf9 \strokec9 =\cf5 \strokec5  currentVersionValue\cf9 \strokec9 .\cf5 \strokec5 split(\cf10 \strokec10 "\cf24 \strokec24 \\\\\cf10 \strokec10 ."\cf5 \strokec5 )\
                    \cf22 \strokec22 def\cf5 \strokec5  patchVersion \cf9 \strokec9 =\cf5 \strokec5  versionParts[\cf25 \strokec25 2\cf5 \strokec5 ]\cf9 \strokec9 .\cf5 \strokec5 toInteger()\
                    patchVersion \cf9 \strokec9 +=\cf5 \strokec5  \cf25 \strokec25 1\cf5 \strokec5 \
\
                    \cf21 \strokec21 // Building new version\cf5 \strokec5 \
                    \cf22 \strokec22 def\cf5 \strokec5  newVersion \cf9 \strokec9 =\cf5 \strokec5  \cf10 \strokec10 "\cf22 \strokec22 $\{\cf9 \strokec9 versionParts[0]\cf22 \strokec22 \}\cf10 \strokec10 .\cf22 \strokec22 $\{\cf9 \strokec9 versionParts[1]\cf22 \strokec22 \}\cf10 \strokec10 .\cf22 \strokec22 $\{\cf9 \strokec9 patchVersion\cf22 \strokec22 \}\cf10 \strokec10 "\cf5 \strokec5 \
\
                    \cf21 \strokec21 // Updating the application version in the build.gradle file\cf5 \strokec5 \
                    sh \cf10 \strokec10 "sed -i 's|version \cf24 \strokec24 \\'\cf22 \strokec22 $\{\cf9 \strokec9 currentVersionValue\cf22 \strokec22 \}\cf24 \strokec24 \\'\cf10 \strokec10 |version \cf24 \strokec24 \\'\cf22 \strokec22 $\{\cf9 \strokec9 newVersion\cf22 \strokec22 \}\cf24 \strokec24 \\'\cf10 \strokec10 |' \cf8 \strokec8 $gradleFile\cf10 \strokec10 "\cf5 \strokec5 \
                    echo \cf10 \strokec10 "New version successfully incremented! Current version is now \cf22 \strokec22 $\{\cf9 \strokec9 newVersion\cf22 \strokec22 \}\cf10 \strokec10 "\cf5 \strokec5 \
                \}\
            \}\
        \}\
\
        stage(\cf10 \strokec10 'Build Application Package'\cf5 \strokec5 ) \{\
            steps \{\
                sh \cf10 \strokec10 'gradle clean build'\cf5 \strokec5 \
            \}\
        \}\
\
        stage(\cf10 \strokec10 'Testing'\cf5 \strokec5 ) \{\
            steps \{\
                \cf21 \strokec21 // This is a generic test stage.\cf5 \strokec5 \
                sh \cf10 \strokec10 'gradle test'\cf5 \strokec5  \
            \}\
        \}
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
3) The artifact resulted then gets pushed to S3 Bucket:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf5 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 stage(\cf10 \strokec10 'Push App Artifact to S3 Bucket'\cf5 \strokec5 ) \{\
            steps \{\
                script \{\
                    \cf22 \strokec22 def\cf5 \strokec5  s3Bucket \cf9 \strokec9 =\cf5 \strokec5  env\cf9 \strokec9 .\cf5 \strokec5 S3_BUCKET\
                    \cf22 \strokec22 def\cf5 \strokec5  artifactPath \cf9 \strokec9 =\cf5 \strokec5  \cf10 \strokec10 'adservice.jar'\cf5 \strokec5 \
                    sh \cf10 \strokec10 "aws s3 cp \cf22 \strokec22 $\{\cf9 \strokec9 artifactPath\cf22 \strokec22 \}\cf10 \strokec10  s3://\cf22 \strokec22 $\{\cf9 \strokec9 s3Bucket\cf22 \strokec22 \}\cf10 \strokec10 /"
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
4) After the Docker Image is built and pushed to ECR, we update the application version inside the respective K8s Deployment manifest, which is setup with an image tag to be replaced accordingly:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf22 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec22 containers\cf5 \strokec5 :\
      - \cf22 \strokec22 name\cf5 \strokec5 : \cf10 \strokec10 server\cf5 \strokec5 \
        \cf22 \strokec22 securityContext\cf5 \strokec5 :\
          \cf22 \strokec22 allowPrivilegeEscalation\cf5 \strokec5 : \cf22 \strokec22 false\cf5 \strokec5 \
          \cf22 \strokec22 capabilities\cf5 \strokec5 :\
            \cf22 \strokec22 drop\cf5 \strokec5 :\
              - \cf10 \strokec10 ALL\cf5 \strokec5 \
          \cf22 \strokec22 privileged\cf5 \strokec5 : \cf22 \strokec22 false\cf5 \strokec5 \
          \cf22 \strokec22 readOnlyRootFilesystem\cf5 \strokec5 : \cf22 \strokec22 true\cf5 \strokec5 \
        \cf26 \cb3 \strokec27 image\cf5 \cb6 \strokec5 : \cf28 \cb3 \strokec16 \{\cf29 \cb3 \strokec16 \{\cf26 \cb3 \strokec30 IMAGE_TAG\cf29 \cb3 \strokec16 \}\cf28 \cb3 \strokec16 \}\cf5 \cb6 \strokec5 \
        \cf22 \strokec22 ports\cf5 \strokec5 :\
        - \cf22 \strokec22 containerPort\cf5 \strokec5 : \cf25 \strokec25 9555
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
5) We then use Shell commands to update and apply the manifest:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf5 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 stage(\cf10 \strokec10 'Update K8s Manifest'\cf5 \strokec5 ) \{\
            steps \{\
                script \{\
                    \cf22 \strokec22 def\cf5 \strokec5  k8sManifestFile \cf9 \strokec9 =\cf5 \strokec5  \cf10 \strokec10 'k8s-manifests/adservice.yaml'\cf5 \strokec5 \
\
                    \cf21 \strokec21 // Replacing K8s manifest placeholder tag with the new image tag\cf5 \strokec5 \
                    sh \cf10 \strokec10 "sed -i 's|\{\{IMAGE_TAG\}\}|\cf22 \strokec22 $\{\cf9 \strokec9 newVersion\cf22 \strokec22 \}\cf10 \strokec10 |' \cf8 \strokec8 $k8sManifestFile\cf10 \strokec10 "\cf5 \strokec5 \
                    echo \cf10 \strokec10 "Kubernetes manifest updated with the new image tag: \cf22 \strokec22 $\{\cf9 \strokec9 newVersion\cf22 \strokec22 \}\cf10 \strokec10 "
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf5 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 stage(\cf10 \strokec10 'Apply updated K8s Manifest'\cf5 \strokec5 ) \{\
            steps \{\
                script \{\
                sh \cf10 \strokec10 "kubectl apply -f k8s-manifests/adservice.yaml"\cf5 \strokec5 \
              \}\
            \}\
        \}
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
The same structure is used for all microservices, where we edit the stages accordingly, depending on the applications programming language. \
\
The pipeline is designed to be repeatable and easy to deploy.\
\
\
}